classDiagram
    class AudioSource {
        -Queue chunk_queue
        -int sample_rate
        -int chunk_size
        -bool is_running
        -InputStream stream
        +__init__(chunk_queue, sample_rate, chunk_duration)
        +audio_callback(indata, frames, time_info, status)
        +start()
        +stop()
    }

    class Windower {
        -Queue chunk_queue
        -Queue window_queue
        -int window_size
        -int step_size
        -int sample_rate
        -ndarray buffer
        -bool is_running
        -Thread thread
        +__init__(chunk_queue, window_queue, window_duration, step_duration, sample_rate)
        +process()
        +start()
        +stop()
    }

    class Recognizer {
        -Queue window_queue
        -Queue text_queue
        -Model model
        -bool is_running
        -Thread thread
        +__init__(window_queue, text_queue, model_path)
        +process()
        +start()
        +stop()
    }

    class TextMatcher {
        -Queue text_queue
        -Queue final_queue
        -Queue partial_queue
        -bool is_running
        -Thread thread
        -str previous_text
        -str finalized_text
        +__init__(text_queue, final_queue, partial_queue)
        +find_overlap(text1, text2) int
        +process()
        +start()
        +stop()
    }

    class FinalTextOutput {
        -Queue final_queue
        -bool is_running
        -Thread thread
        -list full_transcript
        +__init__(final_queue)
        +process()
        +start()
        +stop()
    }

    class PartialTextOutput {
        -Queue partial_queue
        -bool is_running
        -Thread thread
        +__init__(partial_queue)
        +process()
        +start()
        +stop()
    }

    class STTPipeline {
        -Queue chunk_queue
        -Queue window_queue
        -Queue text_queue
        -Queue final_queue
        -Queue partial_queue
        -AudioSource audio_source
        -Windower windower
        -Recognizer recognizer
        -TextMatcher text_matcher
        -FinalTextOutput final_output
        -PartialTextOutput partial_output
        -list components
        +__init__(model_path)
        +start()
        +stop()
        +run()
    }

    class Queue {
        <<external>>
        +put(item)
        +get(timeout) item
        +empty() bool
    }

    %% Data flow relationships
    AudioSource --> Queue : writes chunks
    Windower --> Queue : reads chunks
    Windower --> Queue : writes windows
    Recognizer --> Queue : reads windows
    Recognizer --> Queue : writes text
    TextMatcher --> Queue : reads text
    TextMatcher --> Queue : writes final
    TextMatcher --> Queue : writes partial
    FinalTextOutput --> Queue : reads final
    PartialTextOutput --> Queue : reads partial

    %% Composition relationships
    STTPipeline *-- AudioSource : owns
    STTPipeline *-- Windower : owns
    STTPipeline *-- Recognizer : owns
    STTPipeline *-- TextMatcher : owns
    STTPipeline *-- FinalTextOutput : owns
    STTPipeline *-- PartialTextOutput : owns
    STTPipeline *-- Queue : creates 5

    %% Queue connections (labeled)
    AudioSource ..> Windower : chunk_queue
    Windower ..> Recognizer : window_queue
    Recognizer ..> TextMatcher : text_queue
    TextMatcher ..> FinalTextOutput : final_queue
    TextMatcher ..> PartialTextOutput : partial_queue

    note for STTPipeline "Orchestrates the entire pipeline\nManages component lifecycle"
    note for TextMatcher "Handles overlap detection\nSplits text into final/partial"
    note for Queue "Python queue.Queue\nThread-safe communication"